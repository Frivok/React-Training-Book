import React from 'react';
import ReactDOM from 'react-dom';

ReactDOM.render(
  <HelloWorld/>,
  document.querySelector('#root')
)

// Hereâ€™s an example of a simple React component that returns some JSX:
function Hello() {
  return <span>Hello!</span>
}

// And here is the JavaScript generated by the Babel compiler:
function HelloBabel() {
  return React.createElement('span',{},'Hello!')
}

// The React.createElement function signature looks like this:

/*React.createElement(
  string|element,
  [propsObject],
  [children...]
)
The string|element can be a string describing an HTML or SVG tag (like 'div' or 'span'), or it can be a component a.k.a. function (like HelloWorld, with no quotes).

The propsObject and children are optional, and you can also supply more than one child by passing additional arguments:*/

function HelloWorld() {
  return React.createElement(
    'div',
    {},
    'Hello',
    'Frogs'
  )
}

// You can also nest the calls:
function ManyChildren() {
  return React.createElement(
    'div',
    {},
    React.createElement(
      'div',
      {},
      'Child1'
    ),
    React.createElement(
      'div',
      {},
      'Child2',
     React.createElement(
       'div',
       {},
       'Child2_child'
     )
    )
  )
}

// Try it yourself! Rewrite the HelloWorld component to call React.createElement instead of returning JSX.
function HelloFrogs(){
  return React.createElement(
    
  )
}